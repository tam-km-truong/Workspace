#load configuration
configfile: "experiments/019_version_2_snakemake_workflow/config.yaml"

# Assign variables from config directories
INPUT_DIR = config["INPUT_DIR"]
OUTPUT_DIR = config["OUTPUT_DIR"]
TMP_DIR = config["TMP_DIR"]
CPR_DIR = config["CPR_DIR"]
GENOME_DIR = config["GENOME_DIR"]
SKETCH_DIR = config["SKETCH_DIR"]

# Use glob_wildcards to collect dataset names from input files
datasets = glob_wildcards(INPUT_DIR+"/file.{dataset}.txt").dataset
orders = ['random','accession','phylo'] 
number_of_data_point = 20

# Only include compression in the `all` rule if enabled
if config.get("enable_compression", False):
    compression_targets = expand(CPR_DIR + "/{dataset}/{order}/", dataset=datasets, order=orders)
    compression_targets_accession_phylo = expand(CPR_DIR + "/{dataset}/accession_phylo/", dataset=datasets)
    compression_targets_random_phylo = expand(CPR_DIR + "/{dataset}/random_phylo/", dataset=datasets)
else:
    compression_targets = []
    compression_targets_accession_phylo = []
    compression_targets_random_phylo = []

# Rule all: Automatically collects all datasets from input files
rule all:
    input:
        expand(OUTPUT_DIR + "/{dataset}/{order}/batches/", dataset=datasets, order=orders),
        expand(OUTPUT_DIR + "/{dataset}/{order}/cardinalities.csv", dataset=datasets, order=orders),
        expand(OUTPUT_DIR + "/{dataset}/accession_phylo/batches", dataset=datasets),
        expand(OUTPUT_DIR + "/{dataset}/random_phylo/batches", dataset=datasets),
        expand(OUTPUT_DIR + "/{dataset}/accession_phylo/cardinalities.csv", dataset=datasets),
        expand(OUTPUT_DIR + "/{dataset}/random_phylo/cardinalities.csv", dataset=datasets),
        *compression_targets,
        *compression_targets_accession_phylo,
        *compression_targets_random_phylo,
        expand(OUTPUT_DIR + "/{dataset}/{order}/cpr_size.{order}.csv",dataset=datasets,order=orders)

### Reordering via accession number
rule reorder_accession:
    input:
        INPUT_DIR + "/file.{dataset}.txt"
    output:
        TMP_DIR + "/accession/{dataset}.accession.txt"
    shell:
        "sort {input} > {output}"

### Reordering via ramdom shuffle
rule reorder_random:
    input:
        INPUT_DIR + "/file.{dataset}.txt"
    output:
        TMP_DIR + "/random/{dataset}.random.txt"
    shell:
        "gshuf {input} > {output}"

### Reordering via evolutionary distances
rule find_genome_paths:
    input:
        INPUT_DIR + "/file.{dataset}.txt"
    output:
        TMP_DIR + "/datasets_prepend_genome_paths/{dataset}.full_path.txt"
    shell:
        """
        python python_scripts/find_genome_paths.py {input} {GENOME_DIR} {output} --is_text
        """

rule calculate_tree:
    input:
        TMP_DIR + "/datasets_prepend_genome_paths/{dataset}.full_path.txt"
    output:
        TMP_DIR + "/trees/{dataset}.tree.nw"
    shell:
        "attotree -k 31 -L {input} -o {output}"

rule phylo_order:
    input:
        TMP_DIR + "/trees/{dataset}.tree.nw"
    output:
        TMP_DIR + "/phylo/{dataset}.phylo.txt"
    shell:
        """
        grep -o '[^,:()]*:' {input} | sed 's/:$//' | grep -Ev '^$' > {output}
        """

### Split the reordered datasets into bin
rule splitting_into_bins_tmp:
    input:
        TMP_DIR + "/{order}/{dataset}.{order}.txt"
    output:
        directory(TMP_DIR + "/bins/{dataset}/{order}/")
    params:
        bin_number = number_of_data_point
    shell:
        """
        python python_scripts/split_txt_into_increasing_sublists.py {input} {output} {params.bin_number}
        """

### get the sketch path
rule prepend_genome_sketch_path:
    input:
        TMP_DIR + "/bins/{dataset}/{order}/"
    output:
        directory(TMP_DIR + "/sketches/{dataset}/{order}/")
    shell:
        """
        python python_scripts/find_genome_paths.py {input} {SKETCH_DIR} {output}
        """    

### get the full path and output the batches
rule prepend_genome_full_path_output:
    input:
        TMP_DIR + "/bins/{dataset}/{order}/"
    output:
        directory(OUTPUT_DIR + "/{dataset}/{order}/batches")
    shell:
        """
        python python_scripts/find_genome_paths.py {input} {GENOME_DIR} {output}
        """    

rule compute_cardinalities:
    input:
        TMP_DIR + "/sketches/{dataset}/{order}/"
    output:
        OUTPUT_DIR + "/{dataset}/{order}/cardinalities.csv"
    shell:
        """
        python python_scripts/calculate_batches_card.py {input} {output}
        """

### calculate 2 additional combined orders

#### compute trees
rule reorder_accession_phylo_trees:
    input:
        OUTPUT_DIR + "/{dataset}/accession/batches"
    output:
        directory(TMP_DIR + "/accession_phylo/{dataset}/trees/") 
    shell:
        """
        bash bash_scripts/bin_to_tree.sh {input} {output}
        """

rule reorder_random_phylo_trees:
    input:
        OUTPUT_DIR + "/{dataset}/random/batches"  # This will take the 'order' as a wildcard
    output:
        directory(TMP_DIR + "/random_phylo/{dataset}/trees/")
    shell:
        """
        bash bash_scripts/bin_to_tree.sh {input} {output}
        """

#### process trees to bins
rule reorder_accession_phylo_trees_to_batches:
    input:
        TMP_DIR + "/accession_phylo/{dataset}/trees/"
    output:
        directory(TMP_DIR + "/accession_phylo/{dataset}/batches/") 
    shell:
        """
        bash bash_scripts/tree_phylo_order.sh {input} {output}
        """

rule reorder_random_phylo_trees_to_batches:
    input:
        TMP_DIR + "/random_phylo/{dataset}/trees/"
    output:
        directory(TMP_DIR + "/random_phylo/{dataset}/batches/") 
    shell:
        """
        bash bash_scripts/tree_phylo_order.sh {input} {output}
        """

#### output new batches orders
rule reorder_accession_phylo_output:
    input:
        TMP_DIR + "/accession_phylo/{dataset}/batches/"
    output:
        directory(OUTPUT_DIR + "/{dataset}/accession_phylo/batches")
    shell:
        """
        python python_scripts/find_genome_paths.py {input} {GENOME_DIR} {output}
        """

rule reorder_random_phylo_output:
    input:
        TMP_DIR + "/random_phylo/{dataset}/batches/"
    output:
        directory(OUTPUT_DIR + "/{dataset}/random_phylo/batches")
    shell:
        """
        python python_scripts/find_genome_paths.py {input} {GENOME_DIR} {output}
        """

#### copy the cardinalities to new ordering folder
rule copy_cardinalities_accession_phylo:
    input:
        OUTPUT_DIR + "/{dataset}/accession/cardinalities.csv"
    output:
        OUTPUT_DIR + "/{dataset}/accession_phylo/cardinalities.csv"
    shell:
        "cp {input} {output}"

rule copy_cardinalities_random_phylo:
    input:
        OUTPUT_DIR + "/{dataset}/random/cardinalities.csv"
    output:
        OUTPUT_DIR + "/{dataset}/random_phylo/cardinalities.csv"
    shell:
        "cp {input} {output}"

#### manually compress the output folder
rule compress_output_folder:
    input:
        OUTPUT_DIR + "/{dataset}/{order}/batches/"
    output:
        directory(CPR_DIR + "/{dataset}/{order}/") 
    shell:
        """
            bash_scripts/miniphy2_compress_files.sh {input} {output}
        """

# rule compress_output_accession_phylo:
#     input:
#         OUTPUT_DIR + "/{dataset}/accession_phylo/batches/"
#     output:
#         directory(CPR_DIR + "/{dataset}/accession_phylo/") 
#     shell:
#         """
#             bash_scripts/miniphy2_compress_files.sh {input} {output}
#         """

# rule compress_output_random_phylo:
#     input:
#         OUTPUT_DIR + "/{dataset}/random_phylo/batches/"
#     output:
#         directory(CPR_DIR + "/{dataset}/random_phylo/") 
#     shell:
#         """
#             bash_scripts/miniphy2_compress_files.sh {input} {output}
#         """

#### calculate size
rule compute_compressed_size:
    input:
        CPR_DIR + "/{dataset}/{order}/"
    output:
        # old_output = OUTPUT_DIR + "/{dataset}/{order}/cpr_size.{order}.csv",
        OUTPUT_DIR + "/{dataset}/{order}/cpr_size.{order}.csv"
    # shell:
    #     """
    #     rm {output.old_output}
    #     du -m {input} > {output.new_output}
    #     """
    shell:
        """
        find {input} -type f -exec du -m {{}} + | awk '{{print $2 "," $1}}' > {output}
        """